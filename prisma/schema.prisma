generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Application {
    id        Int      @id @default(autoincrement())
    company   String
    platform  String
    email     String?
    url       String?
    message   String
    createdAt DateTime @default(now())
    state     String   @default("ENVIADO")
    userId    String?
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    mobile        String?
    position      String?
    skills        UserSkill[]
    accounts      Account[]
    sessions      Session[]
    applications  Application[]
}

model Skill {
    id    String @id @default(cuid())
    name  String @unique
    users UserSkill[]
}

// Tabla intermedia para la relaci√≥n muchos a muchos
model UserSkill {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  skill   Skill   @relation(fields: [skillId], references: [id])
  skillId String

  @@id([userId, skillId]) // clave primaria compuesta
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
